#!/usr/bin/env bash

set -veux

HERE="$( cd "$(dirname "$0")" ; pwd -P )"
export HERE
PROJECT_NAME="dvc-example-checkpoints-tensorflow"
REPO_NAME="$(date +%F-%H-%M-%S)"
export REPO_NAME

export REPO_ROOT="${HERE}/build/${REPO_NAME}"

# Count the number of git tag calls in this repository
NUM_TAGS=$(grep 'git tag' ${HERE}/generate-* | wc -l)
# Start a bit more in the past
TOTAL_TAGS=$(( NUM_TAGS + 10 ))

export STEP_TIME=$(( RANDOM + 50000 ))
export TAG_TIME=$(( $(date +%s) - ( TOTAL_TAGS * STEP_TIME ) ))

export GIT_AUTHOR_NAME="Olivaw Owlet"
export GIT_AUTHOR_EMAIL="64868532+iterative-olivaw@users.noreply.github.com"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

if [[ -d "$REPO_ROOT" ]]; then
    echo "Repo $REPO_ROOT already exists, please remove it first."
    exit 1
fi

export REPO_PATH="${REPO_ROOT}/${PROJECT_NAME}"

mkdir -p "$REPO_PATH"
pushd "${REPO_PATH}"

virtualenv -p python3 .venv
export VIRTUAL_ENV_DISABLE_PROMPT=true
source .venv/bin/activate
echo '.venv/' > .gitignore
pip install 'dvc[all]'

git init
git checkout -b basic
cp -arf $HERE/code/basic/* "${REPO_PATH}"
echo '__pycache__' >> .gitignore
test -d data/ || mkdir -p data/
dvc get https://github.com/iterative/dataset-registry \
        fashion-mnist/images.tar.gz -o data/images.tar.gz

dvc init
git commit -m "initialized DVC"
# Remote active on this env only, for writing to HTTP redirect below.
dvc remote add --default --local storage s3://dvc-public/remote/${PROJECT_NAME}
dvc remote add --default storage https://remote.dvc.org/${PROJECT_NAME}
git add .dvc/config
git commit -m "configured DVC remotes"

dvc add data/images.tar.gz
echo 'images/' >> data/.gitignore
git add data/images.tar.gz.dvc data/.gitignore
git commit -m "added data set"

git add .gitignore README.md dvc.yaml params.yaml requirements.txt src/*
git commit -m "added code and requirements files for basic branch"
git tag "basic"

git checkout basic
git checkout -b live-keras
cp -arf $HERE/code/live-keras/* "${REPO_PATH}"
git add .gitignore dvc.yaml params.yaml requirements.txt src/train.py
git commit -m "added dvclive-keras code"
pip install -r requirements.txt
dvc exp run
git add dvc.lock dvclive.json dvclive.html models/.gitignore
git commit -m "after running live-keras"


git checkout basic
git checkout -b python-api
cp -arf $HERE/code/python-api/* "${REPO_PATH}"
pip install -r requirements.txt
dvc exp run
git add .gitignore dvc.lock logs.csv metrics.json models/.gitignore
git commit -m "make-checkpoint"
git status

git checkout basic
git checkout -b signal-file
pip install -r requirements.txt
dvc exp run
cp -arf $HERE/code/signal-file/* "${REPO_PATH}"
git status
read
git add *
git commit -m "signal-file"
git status

PUSH_SCRIPT="${REPO_ROOT}/push-${PROJECT_NAME}.bash"

cat > "${PUSH_SCRIPT}" <<EOF
#!/usr/bin/env bash

set -veux

# The Git repo generated by this script is intended to be published on
# https://github.com/iterative/${PROJECT_NAME}.git Make sure the Github repo
# exists first and that you have appropriate write permissions.

pushd ${REPO_PATH}

dvc remote add --force --default storage s3://dvc-public/remote/${PROJECT_NAME}/
dvc push

git remote add origin "git@github.com:iterative/${PROJECT_NAME}.git"

# Delete all tags in the remote
for tag in \$(git ls-remote --tags origin | grep -v '{}$' | cut -c 52-) ; do
    git push -v origin --delete \${tag}
done

# Delete all experiments in the remote
git ls-remote origin 'refs/exps/*' | cut -f 2 | while read exppath ; do
   git push -d origin "${exppath}"
done

git push --force origin --all --follow-tags
dvc exp list --all --names-only | xargs -n 1 dvc exp push origin
popd
EOF

chmod u+x "${PUSH_SCRIPT}"

popd

cat << EOF
##################################
### REPOSITORY GENERATION DONE ###
##################################

Repositories are in:

${REPO_ROOT}

Push scripts are written to:
$(ls -1 ${REPO_ROOT}/*.bash)

You may remove the generated repo with:

$ rm -fR ${REPO_ROOT}
EOF

unset HERE
unset PROJECT_NAME
unset REPO_NAME
unset REPO_ROOT
unset STEP_TIME
unset TAG_TIME
unset GIT_AUTHOR_NAME
unset GIT_AUTHOR_EMAIL
unset GIT_AUTHOR_DATE
unset GIT_COMMITTER_NAME
unset GIT_COMMITTER_EMAIL
unset GIT_COMMITTER_DATE
unset tag_tick
