#!/bin/bash
# See https://dvc.org/doc/tutorials/get-started

# Setup script env:
#   e   Exit immediately if a command exits with a non-zero exit status.
#   u   Treat unset variables as an error when substituting.
#   x   Print commands and their arguments as they are executed.
set -eux

HERE="$( cd "$(dirname "$0")" ; pwd -P )"
REPO_NAME="example-get-started-cv"
REPO_PATH="$HERE/build/$REPO_NAME"
PROD=${1:-false}

if [ -d "$REPO_PATH" ]; then
  echo "Repo $REPO_PATH already exists, please remove it first."
  exit 1
fi

TOTAL_TAGS=15
STEP_TIME=100000
BEGIN_TIME=$(( $(date +%s) - ( ${TOTAL_TAGS} * ${STEP_TIME}) ))
export TAG_TIME=${BEGIN_TIME}
export GIT_AUTHOR_DATE="${TAG_TIME} +0000"
export GIT_COMMITTER_DATE="${TAG_TIME} +0000"
tick(){
  export TAG_TIME=$(( ${TAG_TIME} + ${STEP_TIME} ))
  export GIT_AUTHOR_DATE="${TAG_TIME} +0000"
  export GIT_COMMITTER_DATE="${TAG_TIME} +0000"
}

export GIT_AUTHOR_NAME="Alex Kim"
export GIT_AUTHOR_EMAIL="alex000kim@gmail.com"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

mkdir -p $REPO_PATH
pushd $REPO_PATH

virtualenv -p python3 .venv
export VIRTUAL_ENV_DISABLE_PROMPT=true
source .venv/bin/activate
echo '.venv/' > .gitignore

# Installing from main since we'd like to update repo before
# the release
pip install "git+https://github.com/iterative/dvc#egg=dvc[all]"

git init
cp $HERE/code/README.md .
cp $HERE/code/.devcontainer.json .
cp $HERE/code/.gitattributes .
cp $HERE/code/requirements.txt .

git add .
tick
git commit -m "Initialize Git repository"
git tag -a "0-git-init" -m "Git initialized."

dvc init
tick
git commit -m "Initialize DVC project"

cp $HERE/code/data .
git add data/.gitignore data/pool_data.dvc
tick
git commit -m "Add data"

# Remote active on this env only, for writing to HTTP redirect below.
dvc remote add -d --local storage s3://dvc-public/remote/get-started-pools
# Actual remote for generated project (read-only). Redirect of S3 bucket above.
dvc remote add -d storage https://remote.dvc.org/get-started-pools
git add .
tick
git commit -m "Configure default remote"
dvc push


cp $HERE/code/notebooks .
pip install -r src/requirements.txt
pip install jupyter
jupyter nbconvert --execute 'notebooks/TrainSegModel.ipynb'
git add .
tick
git commit -m "Add notebook using DVCLive"
git tag -a "1-notebook-dvclive" -m "Notebook added."

cp $HERE/code/src
cp $HERE/code/params.yaml

dvc stage add -n data_split \
  -p base,data_split \
  -d src/data_split.py -d data/pool_data \
  -o data/train_data -o  data/test_data \
  python src/data_split.py
dvc repro
git add .
tick
git commit -m "Create and run data split stage"
dvc push

dvc stage add -n train \
  -p base,train \
  -d src/train.py -d data/train_data \
  -o models/model.pkl \
  -M results/train/metrics.json \
  --plots-no-cache results/train/plots \
  python src/train.py
dvc repro
git add .
tick
git commit -m "Create and run train stage"
dvc push

dvc stage add -n evaluate \
  -p base,evaluate \
  -d src/evaluate.py -d models/model.pkl -d data/test_data \
  -M results/evaluate/metrics.json \
  --plots-no-cache results/evaluate/plots \
  python src/evaluate.py
dvc repro
git add .
tick
git commit -m "Create and run evaluation stage"
git tag -a "baseline-experiment" -m "Baseline experiment evaluation"
dvc push

export GIT_AUTHOR_NAME="David de la Iglesia"
export GIT_AUTHOR_EMAIL="daviddelaiglesiacastro@gmail.com"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

git checkout -b "tune-architecture"

unset GIT_AUTHOR_DATE
unset GIT_COMMITTER_DATE

dvc exp run --queue --set-param train.arch=alexnet
dvc exp run --queue --set-param train.arch=resnet34
dvc exp run --queue --set-param train.arch=vgg19_bn
dvc exp run --queue --set-param train.arch=squeezenet1_1

dvc exp run --run-all
# Apply best experiment
EXP=$(dvc exp show --csv --sort-by dice_multi | tail -n 1 | cut -d , -f 1)
dvc exp apply $EXP
tick
git commit -am "Run experiments tuning architecture"
dvc push

git checkout main

popd

unset TAG_TIME
unset GIT_AUTHOR_DATE
unset GIT_COMMITTER_DATE
unset GIT_AUTHOR_NAME
unset GIT_AUTHOR_EMAIL
unset GIT_COMMITTER_NAME
unset GIT_COMMITTER_EMAIL

echo "`cat <<EOF-

The Git repo generated by this script is intended to be published on
https://github.com/iterative/example-get-started-cv. Make sure the Github repo
exists first and that you have appropriate write permissions.

Run these commands to force push it:

cd build/example-get-started-cv
git remote add origin git@github.com:<slug>/example-get-started-cv.git
git push --force origin main
git push --force origin tune-architecture
git push --force origin increase-epochs
git push --force origin --tags

Run these to drop and then rewrite the experiment references on the repo:

dvc exp remove -A -g origin
dvc exp push origin -A

To create a PR from the "tune-architecture" branch:

gh pr create -t "Run experiments tuning architecture" \
   -B main -H tune-architecture

Finally, return to the directory where you started:

cd ../..

You may remove the generated repo with:

rm -fR build

`"
