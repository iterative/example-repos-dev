#!/bin/bash
# See https://dvc.org/doc/tutorials/get-started

# Setup script env:
#   e   Exit immediately if a command exits with a non-zero exit status.
#   u   Treat unset variables as an error when substituting.
#   x   Print commands and their arguments as they are executed.
set -eux

HERE="$( cd "$(dirname "$0")" ; pwd -P )"
REPO_NAME="example-mlem-get-started"

BUILD_PATH="$HERE/build"

pushd $BUILD_PATH
if [ ! -d "$BUILD_PATH/.venv" ]; then
  exit 1
  virtualenv -p python3 .venv
  export VIRTUAL_ENV_DISABLE_PROMPT=true
  source .venv/bin/activate
  echo '.venv/' > .gitignore
  pip install gitpython
  pip install "git+https://github.com/iterative/mlem#egg=mlem[all]" --use-deprecated=legacy-resolver
  pip install -r $HERE/code/src/requirements.txt
fi
popd

source $BUILD_PATH/.venv/bin/activate

REPO_PATH="$HERE/build/$REPO_NAME"

if [ -d "$REPO_PATH" ]; then
  echo "Repo $REPO_PATH already exists, please remove it first."
  exit 1
fi

TOTAL_TAGS=5
STEP_TIME=100000
BEGIN_TIME=$(( $(date +%s) - ( ${TOTAL_TAGS} * ${STEP_TIME}) ))
export TAG_TIME=${BEGIN_TIME}
export GIT_AUTHOR_DATE=${TAG_TIME}
export GIT_COMMITTER_DATE=${TAG_TIME}
tick(){
  export TAG_TIME=$(( ${TAG_TIME} + ${STEP_TIME} ))
  export GIT_AUTHOR_DATE=${TAG_TIME}
  export GIT_COMMITTER_DATE=${TAG_TIME}
}

export GIT_AUTHOR_NAME="Mikhail Sveshnikov"
export GIT_AUTHOR_EMAIL="mike0sv@gmail.com"
export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"



mkdir -p $REPO_PATH
pushd $REPO_PATH

git init -b main
cp $HERE/code/README.md .
cp $HERE/.gitattributes .
git add .
tick
git commit -m "Initialize Git repository"
git tag -a "0-git-init" -m "Git initialized."

mlem init
tick
git add .mlem/config.yaml
git commit -m "Initialize MLEM project"
git tag -a "1-mlem-init" -m "MLEM initialized."


cp $HERE/code/src/requirements.txt .
cp $HERE/code/src/prepare.py .
git add .
python prepare.py
git add .mlem/dataset
tick
git commit -m "Add data"
git tag -a "2-prepare" -m "Data created."


cp $HERE/code/src/train.py .
python train.py
git add .mlem/model train.py
tick
git commit -m "Train the model"
git tag -a "3-train" -m "Model trained."


cp $HERE/code/src/evaluate.py .
python evaluate.py
git add metrics.json evaluate.py
tick
git commit -m "Evaluate model"
git tag -a "4-eval" -m "Metrics calculated"

git rm -r --cached .mlem/
git commit -m "stop tracking data"

dvc init
dvc remote add myremote --local azure://example-mlem
dvc remote add default -d https://examplemlem.blob.core.windows.net/example-mlem
mlem config set default_storage.type dvc
python train.py
echo "/**/?*.mlem" > .dvcignore
dvc add .mlem/model/rf .mlem/dataset/*.csv
git add .mlem
tick
git commit -m "Switch to dvc storage"
git tag -a "5-switch-to-dvc" -m "Switched to DVC"
dvc push -r myremote

popd

unset TAG_TIME
unset GIT_AUTHOR_DATE
unset GIT_COMMITTER_DATE
unset GIT_AUTHOR_NAME
unset GIT_AUTHOR_EMAIL
unset GIT_COMMITTER_NAME
unset GIT_COMMITTER_EMAIL

echo "`cat <<EOF-

The Git repo generated by this script is intended to be published on
https://github.com/iterative/example-mlem-get-started.
Make sure the Github repo exists first and that you have
appropriate write permissions.

To create it with https://cli.github.com/, run:

gh repo create iterative/example-mlem-get-started --public \
     -d "Get Started MLEM project" -h "https://mlem.ai/doc/get-started"

Run these commands to force push it:

cd build/example-mlem-get-started
git remote add origin  https://github.com/iterative/example-mlem-get-started
git push --force origin main
git push --force origin --tags
cd ../../

You may remove the generated repo with:

rm -fR build

`"
